/**
 */
package DTML.provider;

import DTML.util.DTMLAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DTMLItemProviderAdapterFactory extends DTMLAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DTMLItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.Interface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterfaceItemProvider interfaceItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.Interface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterfaceAdapter() {
		if (interfaceItemProvider == null) {
			interfaceItemProvider = new InterfaceItemProvider(this);
		}

		return interfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.Relationship} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationshipItemProvider relationshipItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.Relationship}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationshipAdapter() {
		if (relationshipItemProvider == null) {
			relationshipItemProvider = new RelationshipItemProvider(this);
		}

		return relationshipItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.Command} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandItemProvider commandItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.Command}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandAdapter() {
		if (commandItemProvider == null) {
			commandItemProvider = new CommandItemProvider(this);
		}

		return commandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.Telemetry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TelemetryItemProvider telemetryItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.Telemetry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTelemetryAdapter() {
		if (telemetryItemProvider == null) {
			telemetryItemProvider = new TelemetryItemProvider(this);
		}

		return telemetryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.DTMI} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DTMIItemProvider dtmiItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.DTMI}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDTMIAdapter() {
		if (dtmiItemProvider == null) {
			dtmiItemProvider = new DTMIItemProvider(this);
		}

		return dtmiItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.CommandPayload} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandPayloadItemProvider commandPayloadItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.CommandPayload}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandPayloadAdapter() {
		if (commandPayloadItemProvider == null) {
			commandPayloadItemProvider = new CommandPayloadItemProvider(this);
		}

		return commandPayloadItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.Quantity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QuantityItemProvider quantityItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.Quantity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQuantityAdapter() {
		if (quantityItemProvider == null) {
			quantityItemProvider = new QuantityItemProvider(this);
		}

		return quantityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.Unit_Test} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Unit_TestItemProvider unit_TestItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.Unit_Test}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnit_TestAdapter() {
		if (unit_TestItemProvider == null) {
			unit_TestItemProvider = new Unit_TestItemProvider(this);
		}

		return unit_TestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.UReal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected URealItemProvider uRealItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.UReal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createURealAdapter() {
		if (uRealItemProvider == null) {
			uRealItemProvider = new URealItemProvider(this);
		}

		return uRealItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.Field} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldItemProvider fieldItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.Field}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldAdapter() {
		if (fieldItemProvider == null) {
			fieldItemProvider = new FieldItemProvider(this);
		}

		return fieldItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.DTObject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DTObjectItemProvider dtObjectItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.DTObject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDTObjectAdapter() {
		if (dtObjectItemProvider == null) {
			dtObjectItemProvider = new DTObjectItemProvider(this);
		}

		return dtObjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.DTArray} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DTArrayItemProvider dtArrayItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.DTArray}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDTArrayAdapter() {
		if (dtArrayItemProvider == null) {
			dtArrayItemProvider = new DTArrayItemProvider(this);
		}

		return dtArrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.DTMap} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DTMapItemProvider dtMapItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.DTMap}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDTMapAdapter() {
		if (dtMapItemProvider == null) {
			dtMapItemProvider = new DTMapItemProvider(this);
		}

		return dtMapItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.DTEnum} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DTEnumItemProvider dtEnumItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.DTEnum}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDTEnumAdapter() {
		if (dtEnumItemProvider == null) {
			dtEnumItemProvider = new DTEnumItemProvider(this);
		}

		return dtEnumItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.DigitalTwin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DigitalTwinItemProvider digitalTwinItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.DigitalTwin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDigitalTwinAdapter() {
		if (digitalTwinItemProvider == null) {
			digitalTwinItemProvider = new DigitalTwinItemProvider(this);
		}

		return digitalTwinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.ComponentInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentInstanceItemProvider componentInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.ComponentInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentInstanceAdapter() {
		if (componentInstanceItemProvider == null) {
			componentInstanceItemProvider = new ComponentInstanceItemProvider(this);
		}

		return componentInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.RelationshipInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RelationshipInstanceItemProvider relationshipInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.RelationshipInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRelationshipInstanceAdapter() {
		if (relationshipInstanceItemProvider == null) {
			relationshipInstanceItemProvider = new RelationshipInstanceItemProvider(this);
		}

		return relationshipInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.PropertyInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyInstanceItemProvider propertyInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.PropertyInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyInstanceAdapter() {
		if (propertyInstanceItemProvider == null) {
			propertyInstanceItemProvider = new PropertyInstanceItemProvider(this);
		}

		return propertyInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.CommandInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandInstanceItemProvider commandInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.CommandInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandInstanceAdapter() {
		if (commandInstanceItemProvider == null) {
			commandInstanceItemProvider = new CommandInstanceItemProvider(this);
		}

		return commandInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.CommandPayloadInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandPayloadInstanceItemProvider commandPayloadInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.CommandPayloadInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandPayloadInstanceAdapter() {
		if (commandPayloadInstanceItemProvider == null) {
			commandPayloadInstanceItemProvider = new CommandPayloadInstanceItemProvider(this);
		}

		return commandPayloadInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.EnumSchemaTypes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumSchemaTypesItemProvider enumSchemaTypesItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.EnumSchemaTypes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumSchemaTypesAdapter() {
		if (enumSchemaTypesItemProvider == null) {
			enumSchemaTypesItemProvider = new EnumSchemaTypesItemProvider(this);
		}

		return enumSchemaTypesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.EnumValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnumValueItemProvider enumValueItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.EnumValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnumValueAdapter() {
		if (enumValueItemProvider == null) {
			enumValueItemProvider = new EnumValueItemProvider(this);
		}

		return enumValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.KeyValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyValueTypeItemProvider keyValueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.KeyValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyValueTypeAdapter() {
		if (keyValueTypeItemProvider == null) {
			keyValueTypeItemProvider = new KeyValueTypeItemProvider(this);
		}

		return keyValueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.ObjectInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ObjectInstanceItemProvider objectInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.ObjectInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createObjectInstanceAdapter() {
		if (objectInstanceItemProvider == null) {
			objectInstanceItemProvider = new ObjectInstanceItemProvider(this);
		}

		return objectInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.DTBoolean} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DTBooleanItemProvider dtBooleanItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.DTBoolean}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDTBooleanAdapter() {
		if (dtBooleanItemProvider == null) {
			dtBooleanItemProvider = new DTBooleanItemProvider(this);
		}

		return dtBooleanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.DTString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DTStringItemProvider dtStringItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.DTString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDTStringAdapter() {
		if (dtStringItemProvider == null) {
			dtStringItemProvider = new DTStringItemProvider(this);
		}

		return dtStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.DTInteger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DTIntegerItemProvider dtIntegerItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.DTInteger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDTIntegerAdapter() {
		if (dtIntegerItemProvider == null) {
			dtIntegerItemProvider = new DTIntegerItemProvider(this);
		}

		return dtIntegerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.FieldInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FieldInstanceItemProvider fieldInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.FieldInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFieldInstanceAdapter() {
		if (fieldInstanceItemProvider == null) {
			fieldInstanceItemProvider = new FieldInstanceItemProvider(this);
		}

		return fieldInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.MapInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MapInstanceItemProvider mapInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.MapInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMapInstanceAdapter() {
		if (mapInstanceItemProvider == null) {
			mapInstanceItemProvider = new MapInstanceItemProvider(this);
		}

		return mapInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.KeyValueInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KeyValueInstanceItemProvider keyValueInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.KeyValueInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKeyValueInstanceAdapter() {
		if (keyValueInstanceItemProvider == null) {
			keyValueInstanceItemProvider = new KeyValueInstanceItemProvider(this);
		}

		return keyValueInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.ArrayInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayInstanceItemProvider arrayInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.ArrayInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayInstanceAdapter() {
		if (arrayInstanceItemProvider == null) {
			arrayInstanceItemProvider = new ArrayInstanceItemProvider(this);
		}

		return arrayInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.DigitalTwinEnvironment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DigitalTwinEnvironmentItemProvider digitalTwinEnvironmentItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.DigitalTwinEnvironment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDigitalTwinEnvironmentAdapter() {
		if (digitalTwinEnvironmentItemProvider == null) {
			digitalTwinEnvironmentItemProvider = new DigitalTwinEnvironmentItemProvider(this);
		}

		return digitalTwinEnvironmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.StringInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringInstanceItemProvider stringInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.StringInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringInstanceAdapter() {
		if (stringInstanceItemProvider == null) {
			stringInstanceItemProvider = new StringInstanceItemProvider(this);
		}

		return stringInstanceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link DTML.IntInstance} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntInstanceItemProvider intInstanceItemProvider;

	/**
	 * This creates an adapter for a {@link DTML.IntInstance}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntInstanceAdapter() {
		if (intInstanceItemProvider == null) {
			intInstanceItemProvider = new IntInstanceItemProvider(this);
		}

		return intInstanceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (interfaceItemProvider != null)
			interfaceItemProvider.dispose();
		if (componentItemProvider != null)
			componentItemProvider.dispose();
		if (relationshipItemProvider != null)
			relationshipItemProvider.dispose();
		if (propertyItemProvider != null)
			propertyItemProvider.dispose();
		if (commandItemProvider != null)
			commandItemProvider.dispose();
		if (telemetryItemProvider != null)
			telemetryItemProvider.dispose();
		if (dtmiItemProvider != null)
			dtmiItemProvider.dispose();
		if (commandPayloadItemProvider != null)
			commandPayloadItemProvider.dispose();
		if (quantityItemProvider != null)
			quantityItemProvider.dispose();
		if (unit_TestItemProvider != null)
			unit_TestItemProvider.dispose();
		if (uRealItemProvider != null)
			uRealItemProvider.dispose();
		if (fieldItemProvider != null)
			fieldItemProvider.dispose();
		if (dtObjectItemProvider != null)
			dtObjectItemProvider.dispose();
		if (dtArrayItemProvider != null)
			dtArrayItemProvider.dispose();
		if (dtMapItemProvider != null)
			dtMapItemProvider.dispose();
		if (dtEnumItemProvider != null)
			dtEnumItemProvider.dispose();
		if (digitalTwinItemProvider != null)
			digitalTwinItemProvider.dispose();
		if (componentInstanceItemProvider != null)
			componentInstanceItemProvider.dispose();
		if (relationshipInstanceItemProvider != null)
			relationshipInstanceItemProvider.dispose();
		if (propertyInstanceItemProvider != null)
			propertyInstanceItemProvider.dispose();
		if (commandInstanceItemProvider != null)
			commandInstanceItemProvider.dispose();
		if (commandPayloadInstanceItemProvider != null)
			commandPayloadInstanceItemProvider.dispose();
		if (enumSchemaTypesItemProvider != null)
			enumSchemaTypesItemProvider.dispose();
		if (enumValueItemProvider != null)
			enumValueItemProvider.dispose();
		if (keyValueTypeItemProvider != null)
			keyValueTypeItemProvider.dispose();
		if (objectInstanceItemProvider != null)
			objectInstanceItemProvider.dispose();
		if (dtBooleanItemProvider != null)
			dtBooleanItemProvider.dispose();
		if (dtStringItemProvider != null)
			dtStringItemProvider.dispose();
		if (dtIntegerItemProvider != null)
			dtIntegerItemProvider.dispose();
		if (fieldInstanceItemProvider != null)
			fieldInstanceItemProvider.dispose();
		if (mapInstanceItemProvider != null)
			mapInstanceItemProvider.dispose();
		if (keyValueInstanceItemProvider != null)
			keyValueInstanceItemProvider.dispose();
		if (arrayInstanceItemProvider != null)
			arrayInstanceItemProvider.dispose();
		if (digitalTwinEnvironmentItemProvider != null)
			digitalTwinEnvironmentItemProvider.dispose();
		if (stringInstanceItemProvider != null)
			stringInstanceItemProvider.dispose();
		if (intInstanceItemProvider != null)
			intInstanceItemProvider.dispose();
	}

}
